import React, { useState, useEffect } from 'react';

const PomodoroTimer = () => {
const [isRunning, setIsRunning] = useState(false);
const [timeRemaining, setTimeRemaining] = useState(25 * 60); // 25 minutes

useEffect(() => {
let interval;
if (isRunning) {
interval = setInterval(() => {
setTimeRemaining((prevTime) => prevTime - 1);
}, 1000);
}
return () => clearInterval(interval);
}, [isRunning]);

const formatTime = (seconds) => {
const minutes = Math.floor(seconds / 60);
const remainingSeconds = seconds % 60;
return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
};

const handleStart = () => {
setIsRunning(true);
};

const handlePause = () => {
setIsRunning(false);
};

const handleReset = () => {
setIsRunning(false);
setTimeRemaining(25 * 60);
};

return (
<div className="flex flex-col items-center space-y-4">
<h2 className="text-2xl font-bold">Pomodoro Timer</h2>
<div className="text-6xl font-bold">{formatTime(timeRemaining)}</div>
<div className="space-x-4">
{!isRunning && (
<button
className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
onClick={handleStart}
>
Start
</button>
)}
{isRunning && (
<button
className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded"
onClick={handlePause}
>
Pause
</button>
)}
<button
className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
onClick={handleReset}
>
Reset
</button>
</div>
</div>
);
};

export default PomodoroTimer;
